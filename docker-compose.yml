services:
  web:
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: always
    ports:
      - 3000:3000
    networks:
      - app_network
  
  api:
    container_name: api
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    restart: always
    ports:
      - 3001:3001
    networks:
      - app_network

  # PostgreSQL database for question service
  question_db:
    container_name: question_db
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: questionuser
      POSTGRES_PASSWORD: ${QUESTION_DB_PASSWORD:-questionpass123}
      POSTGRES_DB: questiondb
    ports:
      - "5434:5432" # Expose on 5434 to avoid conflicts with local postgres
    volumes:
      - question_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U questionuser -d questiondb"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Question service
  question_service:
    container_name: question_service
    # image: your-docker-repo/question-service:latest # Placeholder for your pre-built image
    build:
      context: ./apps/question_service
      dockerfile: dockerfile
    restart: always
    ports:
      - "8000:80"
    environment:
      DATABASE_URL: postgresql://questionuser:${QUESTION_DB_PASSWORD:-questionpass123}@question_db:5432/questiondb
      ENV: production
    depends_on:
      question_db:
        condition: service_healthy
    networks:
      - app_network

  # PostgreSQL database for user service
  user_db:
    container_name: user_db
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD:-password123}
      POSTGRES_DB: userdb
    ports:
      - "5433:5432" # Expose on 5433 to avoid conflicts
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d userdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  # User service
  user_service:
    container_name: user_service
    # image: your-docker-repo/user-service:latest # Placeholder for your pre-built image
    build:
      context: .
      dockerfile: ./apps/user_service/Dockerfile
    restart: always
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql://user:${USER_DB_PASSWORD:-password123}@user_db:5232/userdb
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - app_network

  # Redis for matching service
  matching_redis:
    container_name: matching_redis
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - matching_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  # Matching service
  matching_service:
    container_name: matching_service
    build:
      context: .
      dockerfile: ./apps/matching-service/Dockerfile
    restart: always
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      REDIS_HOST: matching_redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      COLLABORATION_SERVICE_URL: http://collaboration_service:4000
      MATCH_TIMEOUT_SECONDS: 30
      REQUEST_TTL_SECONDS: 60
      LOG_LEVEL: info
    depends_on:
      matching_redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/-/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app_network

# Define volumes for persistent data
volumes:
  question_db_data:
    driver: local
  user_db_data:
    driver: local
  matching_redis_data:
    driver: local

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  app_network:
    driver: bridge
