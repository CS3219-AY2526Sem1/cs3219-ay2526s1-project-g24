version: "3"

services:
  # PostgreSQL database for question service
  question_db:
    container_name: question_db
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: questionuser
      POSTGRES_PASSWORD: ${QUESTION_DB_PASSWORD:-questionpass123}
      POSTGRES_DB: questiondb
    ports:
      - "5434:5432" # Expose on 5434 to avoid conflicts with local postgres
    volumes:
      - question_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U questionuser -d questiondb"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Question service
  question_service:
    container_name: question_service
    image: your-docker-repo/question-service:latest # Placeholder for your pre-built image
    restart: always
    ports:
      - "8000:80"
    environment:
      DATABASE_URL: postgresql://questionuser:${QUESTION_DB_PASSWORD:-questionpass123}@question_db:5432/questiondb
      ENV: production
    depends_on:
      question_db:
        condition: service_healthy
    networks:
      - app_network

  # PostgreSQL database for user service
  user_db:
    container_name: user_db
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD:-password123}
      POSTGRES_DB: userdb
    ports:
      - "5433:5432" # Expose on 5433 to avoid conflicts
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d userdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  # User service
  user_service:
    container_name: user_service
    image: your-docker-repo/user-service:latest # Placeholder for your pre-built image
    restart: always
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql://user:${USER_DB_PASSWORD:-password123}@user_db:5232/userdb
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - app_network

# Define volumes for persistent data
volumes:
  question_db_data:
    driver: local
  user_db_data:
    driver: local

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  app_network:
    driver: bridge
