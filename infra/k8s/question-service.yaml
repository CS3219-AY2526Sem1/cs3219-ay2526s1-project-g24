apiVersion: apps/v1
kind: Deployment
metadata:
  name: question-service
  namespace: cs3219
  labels:
    app: question-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: question-service
  template:
    metadata:
      labels:
        app: question-service
        managed-by: kustomize
        project: cs3219
    spec:
      serviceAccountName: ghcr-pull
      initContainers:
      - name: wait-for-question-db
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          echo "‚è≥ Waiting for question-db to be ready..."
          for i in $(seq 1 60); do
            if pg_isready -h question-db -p 5432 -U "$POSTGRES_USER" -d "$POSTGRES_DB"; then
              echo "‚úÖ question-db is ready"; exit 0; fi;
            echo "...still waiting ($i)"; sleep 2;
          done
          echo "‚ùå Timeout waiting for question-db"; exit 1
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-name
      # Init container to run migrations and seed
      - name: migration
        image: ghcr.io/cs3219-ay2526sem1/cs3219-g24-question-service:latest
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-name
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@question-db:5432/$(POSTGRES_DB)"
        - name: ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: QUESTION_SERVICE_ENV
        command:
        - /bin/sh
        - -c
        - |
          echo 'üîÑ Waiting for database...'
          sleep 10
          
          echo 'üì¶ Running migrations...'
          /app/.venv/bin/alembic upgrade head
          echo '‚úÖ Migrations complete'
          
          echo 'üå± Seeding database...'
          /app/.venv/bin/python -c 'from seed_db import seed_database; from app.questions.models import Topic; from app.core.database import SessionLocal; db = SessionLocal(); existing = db.query(Topic).count(); db.close(); seed_database() if existing == 0 else print("‚úÖ Database already seeded")'
          echo '‚úÖ Setup complete'
      containers:
      - name: question-service
        image: ghcr.io/cs3219-ay2526sem1/cs3219-g24-question-service:latest
        ports:
        - containerPort: 80
          name: http
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: question-db-name
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@question-db:5432/$(POSTGRES_DB)"
        - name: ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: QUESTION_SERVICE_ENV
        - name: CORS_ORIGINS
          value: "https://cs3219.leyew.dev,http://localhost:3000,http://127.0.0.1:3000"
        command:
        - /bin/sh
        - -c
        - |
          echo 'üöÄ Starting FastAPI server...'
          /app/.venv/bin/fastapi run app/main.py --port 80 --host 0.0.0.0
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: question-service
  namespace: cs3219
  labels:
    app: question-service
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: question-service
