"""initial schema

Revision ID: 8b57167f590e
Revises: 
Create Date: 2025-10-13 19:19:32.991589

"""
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '8b57167f590e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('questions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('difficulty', sa.Enum('EASY', 'MEDIUM', 'HARD', name='difficultyenum'), nullable=False),
    sa.Column('code_templates', sa.JSON(), nullable=False),
    sa.Column('function_signature', sa.JSON(), nullable=False),
    sa.Column('constraints', sa.Text(), nullable=True),
    sa.Column('hints', sa.JSON(), nullable=True),
    sa.Column('acceptance_rate', sa.Integer(), nullable=True),
    sa.Column('total_submissions', sa.Integer(), nullable=True),
    sa.Column('total_accepted', sa.Integer(), nullable=True),
    sa.Column('likes', sa.Integer(), nullable=True),
    sa.Column('dislikes', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_index(op.f('ix_questions_difficulty'), 'questions', ['difficulty'], unique=False)
    op.create_table('topics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('question_companies',
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('company_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], )
    )
    op.create_table('question_topics',
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('topic_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], )
    )
    op.create_table('test_cases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('input_data', sa.JSON(), nullable=False),
    sa.Column('expected_output', sa.JSON(), nullable=False),
    sa.Column('visibility', sa.Enum('PUBLIC', 'PRIVATE', 'SAMPLE', name='testcasevisibilityenum'), nullable=False),
    sa.Column('order_index', sa.Integer(), nullable=True),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_question_attempts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(length=255), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('is_solved', sa.Boolean(), nullable=True),
    sa.Column('attempts_count', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('last_attempted_at', sa.DateTime(), nullable=True),
    sa.Column('first_solved_at', sa.DateTime(), nullable=True),
    sa.Column('best_runtime_ms', sa.Integer(), nullable=True),
    sa.Column('best_memory_mb', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_question_attempts_question_id'), 'user_question_attempts', ['question_id'], unique=False)
    op.create_index(op.f('ix_user_question_attempts_user_id'), 'user_question_attempts', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_question_attempts_user_id'), table_name='user_question_attempts')
    op.drop_index(op.f('ix_user_question_attempts_question_id'), table_name='user_question_attempts')
    op.drop_table('user_question_attempts')
    op.drop_table('test_cases')
    op.drop_table('question_topics')
    op.drop_table('question_companies')
    op.drop_table('topics')
    op.drop_index(op.f('ix_questions_difficulty'), table_name='questions')
    op.drop_table('questions')
    op.drop_table('companies')
    # ### end Alembic commands ###
